using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace MalwareSampleExchange.Console.SampleStorage;

public class UrlSampleStorageHandler : ISampleStorageHandler
{
    private readonly ILogger<UrlSampleStorageHandler> _logger;
    private readonly HttpClient _client;
    private readonly UrlStorageOptions _options;

    public UrlSampleStorageHandler(ILogger<UrlSampleStorageHandler> logger, IOptions<UrlStorageOptions> options, HttpClient client)
    {
        _logger = logger;
        _client = client;
        _options = options.Value ?? throw new ArgumentNullException(nameof(options));
    }

    public async Task<long> GetFileSizeAsync(string sha256, CancellationToken token = default)
    {
        try
        {
            var requestUrl = $"{_options.Url}{sha256}";
            var response = await _client.GetAsync(requestUrl, token);
            return response.Content.Headers.ContentLength ?? 0L;
        }
        catch (Exception e)
        {
            _logger.LogError(e, $"File for SHA256 {sha256} should be there, but isn't.");
            return 0L;
        }
    }

    public async Task<FileStreamResult> GetAsync(string sha256, CancellationToken token = default)
    {
        var requestUrl = $"{_options.Url}{sha256}";
        var response = await _client.GetAsync(requestUrl, token);
        if (!response.IsSuccessStatusCode)
        {
            throw new FileNotFoundException($"{response.StatusCode}");
        }

        var stream = await response.Content.ReadAsStreamAsync(token);
        return new FileStreamResult(stream, "application/octet-stream");
    }

    public Task WriteAsync(string sha256, Stream stream, CancellationToken token = default)
    {
        throw new NotImplementedException();
    }
}
