using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Amazon.S3;
using Amazon.S3.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Prometheus.Client;

namespace MalwareSampleExchange.Console.SampleStorage;

public class S3SampleStorageHandler : ISampleStorageHandler
{
    private readonly ICounter _s3SizeCounter = Prometheus.Client.Metrics.DefaultFactory
        .CreateCounter("malware_sample_exchange_s3_size_request", "Count per endpoint request.");

    private readonly S3StorageOptions _options;
    private readonly AmazonS3Client _s3Client;

    public S3SampleStorageHandler(IOptions<S3StorageOptions> options)
    {
        _options = options.Value ?? throw new ArgumentNullException(nameof(options));
        _s3Client = new(
            _options.AccessKey,
            _options.SecretKey,
            _options.S3Config);
    }

    public async Task<long> GetFileSizeAsync(string sha256, CancellationToken token = default)
    {
        _s3SizeCounter.Inc();
        var metadataResponse = await _s3Client.GetObjectMetadataAsync(_options.Bucket, GetPath(sha256), token);
        return metadataResponse.ContentLength;
    }

    public async Task<FileStreamResult> GetAsync(string sha256, CancellationToken token = default)
    {
        var filename = GetPath(sha256);
        var objectResponse = await _s3Client.GetObjectAsync(_options.Bucket, filename, token);
        return new FileStreamResult(objectResponse.ResponseStream,
            "application/octet-stream");
    }

    public async Task WriteAsync(string sha256, Stream stream, CancellationToken token = default)
    {
        await _s3Client.PutObjectAsync(new PutObjectRequest
        {
            Key = GetPath(sha256),
            InputStream = stream,
            BucketName = _options.Bucket,
            Headers = { ContentLength = stream.Length }
        }, token);
    }

    private string GetPath(string sha256)
    {
        var loweredSha256 = sha256.ToLower();
        if (!_options.PathPrefix)
        {
            return loweredSha256;
        }

        var pathPartOne = loweredSha256.Substring(0, 2);
        var pathPartTwo = loweredSha256.Substring(2, 2);
        var filename =
            $"{pathPartOne}/{pathPartTwo}/{loweredSha256}";
        return filename;

    }
}
