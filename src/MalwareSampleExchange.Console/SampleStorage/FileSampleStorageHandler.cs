using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace MalwareSampleExchange.Console.SampleStorage;

public class FileSampleStorageHandler : ISampleStorageHandler
{
    private readonly ILogger<FileSampleStorageHandler> _logger;
    private readonly FileStorageOptions _options;

    public FileSampleStorageHandler(ILogger<FileSampleStorageHandler> logger, IOptions<FileStorageOptions> options)
    {
        _logger = logger;
        _options = options.Value ?? throw new ArgumentNullException(nameof(options));
    }

    public Task<long> GetFileSizeAsync(string sha256, CancellationToken token = default)
    {
        try
        {
            var filename = GetPath(sha256);
            var fileInfo = new FileInfo(filename);
            return Task.FromResult(fileInfo.Length);
        }
        catch (Exception e)
        {
            _logger.LogError(e, $"File for SHA256 {sha256} should be there, but isn't.");
            return Task.FromResult(0L);
        }
    }

    public Task<FileStreamResult> GetAsync(string sha256, CancellationToken token = default)
    {
        var filename = GetPath(sha256);
        return Task.FromResult(new FileStreamResult(new FileStream(
                filename, FileMode.Open, FileAccess.Read, FileShare.Read, 4096, true),
            "application/octet-stream"));
    }

    public async Task WriteAsync(string sha256, Stream stream, CancellationToken token = default)
    {
        var path = GetPath(sha256);
        Directory.CreateDirectory(Path.GetDirectoryName(path) ?? throw new InvalidOperationException());
        await using var fileStream = File.OpenWrite(path);
        await stream.CopyToAsync(fileStream, token);
    }

    private string GetPath(string sha256)
    {
        var pathPartSha256 = sha256.ToLower();
        var pathPartOne = pathPartSha256.Substring(0, 2);
        var pathPartTwo = pathPartSha256.Substring(2, 2);
        var filename =
            $"{_options.Path}/{pathPartOne}/{pathPartTwo}/{pathPartSha256}";
        return filename;
    }
}
