using MalwareSampleExchange.Console.AuthHandler;
using MalwareSampleExchange.Console.Database;
using MalwareSampleExchange.Console.ListRequester;
using MalwareSampleExchange.Console.Partner;
using MalwareSampleExchange.Console.SampleStorage;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Options;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Prometheus.Client.AspNetCore;
using Prometheus.Client.HttpRequestDurations;
using Serilog;
using Serilog.Formatting.Json;

var builder = WebApplication.CreateBuilder(args);
var services = builder.Services;

builder.Services.AddLogging(
    loggingBuilder =>
    {
        loggingBuilder
            .AddFilter("Microsoft", LogLevel.Warning)
            .AddFilter("System", LogLevel.Warning)
            .AddFilter("NToastNotify", LogLevel.Warning)
            .AddConsole();
    });

builder.Host.UseSerilog((context, configuration) => configuration
    .ReadFrom.Configuration(context.Configuration)
    .Enrich.FromLogContext()
    .WriteTo.Console(new JsonFormatter(renderMessage: true)));

services.Configure<MongoMetadataOptions>(builder.Configuration.GetSection("MongoDb"));
services.AddSingleton<ISampleMetadataHandler, MongoMetadataHandler>();
services.AddHostedService<MongoMetadataHandler>();

var storageOptions = new StorageOptions();
builder.Configuration.GetSection("Storage").Bind(storageOptions);
switch (storageOptions.Backend)
{
     case StorageBackend.S3:
         services.Configure<S3StorageOptions>(builder.Configuration.GetSection("Storage"));
         services.AddTransient<ISampleStorageHandler, S3SampleStorageHandler>();
         break;
     case StorageBackend.Url:
         services.Configure<UrlStorageOptions>(builder.Configuration.GetSection("Storage"));
         services.AddHttpClient<ISampleStorageHandler, UrlSampleStorageHandler>().ConfigurePrimaryHttpMessageHandler(t =>
         {
             var clientHandler = new HttpClientHandler();
             var options = t.GetService<IOptions<UrlStorageOptions>>()?.Value ?? throw new ArgumentNullException("storage", "Storage is set");
             if (options.IgnoreTls)
             {
                 clientHandler.ServerCertificateCustomValidationCallback = (_, _, _, _) => true;
             }
             return clientHandler;
         });
         break;
     case StorageBackend.File:
     default:
         services.Configure<FileStorageOptions>(builder.Configuration.GetSection("Storage"));
         services.AddTransient<ISampleStorageHandler, FileSampleStorageHandler>();
         break;
}

services.Configure<PartnerProviderOptions>(builder.Configuration.GetSection("Config"));
services.AddHttpClient<PartnerProvider>();
services.AddSingleton<IPartnerProvider, PartnerProvider>();

services.Configure<ListRequesterOptions>(builder.Configuration.GetSection("Token"));
services.AddTransient<IListRequester, ListRequester>();

services.Configure<UploadOptions>(builder.Configuration.GetSection("Upload"));

services
     .AddMvc(options =>
     {
         options.EnableEndpointRouting = false;
         options.MaxIAsyncEnumerableBufferLimit = int.MaxValue;
     })
     .AddNewtonsoftJson(opts =>
     {
         opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
         var item = new StringEnumConverter { NamingStrategy = new CamelCaseNamingStrategy() };
         opts.SerializerSettings.Converters.Add(item);
     });

services.AddAuthentication("BasicAuthentication")
 .AddScheme<AuthenticationSchemeOptions, BasicAuthenticationHandler>("BasicAuthentication", null);

//curl -u "gdata:pw" -X GET -k -i 'https://malware-sample-export.processing-orange.ptata.gdata.de/v1/list?start=2022-01-14'
// Add OpenAPI generator
services.AddSwaggerGen(c =>
{
     c.EnableAnnotations();
     c.SwaggerDoc("v1",
         new OpenApiInfo
         {
             Title = "Malware Sample Exchange - V1",
             Version = "v1",
             Description = "https://github.com/GDATASoftwareAG/MSE"
         }
     );
     c.AddSecurityDefinition("basic", new OpenApiSecurityScheme
     {
         Name = "Authorization",
         Type = SecuritySchemeType.Http,
         Scheme = "basic",
         In = ParameterLocation.Header,
         Description = "Basic Authorization header using the Bearer scheme.",
     });
     c.AddSecurityRequirement(new OpenApiSecurityRequirement
     {
         {
             new OpenApiSecurityScheme
             {
                 Reference = new OpenApiReference
                 {
                     Type = ReferenceType.SecurityScheme,
                     Id = "basic"
                 }
             },
             new string[] { }
         }
     });
});

var app = builder.Build();


 app.UsePrometheusServer(q =>
 {
     var options = new PrometheusOptions();
     builder.Configuration.GetSection("Prometheus").Bind(options);
     q.Port = options.Port;
 });

 app.UsePrometheusRequestDurations(q =>
 {
     q.IncludeMethod = true;
     q.IncludePath = true;
     q.Buckets = [0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0, 20.0, 30.0, 60.0];
     q.IgnoreRoutesConcrete = ["/metrics", "/favicon.ico", "/index.html", "/"];
     q.IgnoreRoutesStartWith = ["/swagger"];
 });

 app.UseDefaultFiles()
     .UseForwardedHeaders()
     .UseRouting()
     .UseStaticFiles()
     .UseSwagger()
     .UseSwaggerUI(options =>
     {
         options.DocumentTitle = "Malware Sample Exchange - V1";
         options.SwaggerEndpoint("/swagger/v1/swagger.json", "Malware Sample Exchange - V1");
     });

 app.UseAuthentication();
 app.UseAuthorization();
 app.UseEndpoints(endpoints => { endpoints.MapControllers(); });

 if (app.Environment.IsDevelopment())
 {
     app.UseDeveloperExceptionPage();
 }

 app.Run();
 
