using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using MongoDB.Driver;
using MalwareSampleExchange.Console.Models;

namespace MalwareSampleExchange.Console.Database;

public interface ISampleMetadataHandler
{
    /// <summary>
    /// 
    /// </summary>
    /// <param name="start"></param>
    /// <param name="end"></param>
    /// <param name="sampleSet"></param>
    /// <param name="token"></param>
    /// <returns></returns>
    Task<IEnumerable<ExportSample>> GetSamplesAsync(DateTime start, DateTime? end, string? sampleSet, CancellationToken token = default);

    Task InsertSampleAsync(RequestExportSample sample, CancellationToken token = default);
}

public class MongoMetadataHandler : ISampleMetadataHandler, IHostedService
{
    private readonly MongoMetadataOptions _options;
    private readonly MongoClient _mongoClient;

    public MongoMetadataHandler(IOptions<MongoMetadataOptions> options)
    {
        _options = options.Value ?? throw new ArgumentNullException(nameof(options));
        _mongoClient = new MongoClient(options.Value.ConnectionString);
    }

    public async Task<IEnumerable<ExportSample>> GetSamplesAsync(DateTime start, DateTime? end, string? sampleSet, CancellationToken token = default)
    {
        var mongoDatabase = _mongoClient.GetDatabase(_options.DatabaseName);
        var sampleCollection = mongoDatabase.GetCollection<ExportSample>(_options.CollectionName);
        var list = end == null
            ? await sampleCollection
                .FindAsync(sample => sample.SampleSet == sampleSet && sample.Imported >= start, cancellationToken: token)
            : await sampleCollection
                .FindAsync(sample => sample.SampleSet == sampleSet && sample.Imported >= start && sample.Imported <= end, cancellationToken: token);
        return list.ToList(cancellationToken: token);
    }

    public async Task InsertSampleAsync(RequestExportSample sample, CancellationToken token = default)
    {
        var mongoDatabase = _mongoClient.GetDatabase(_options.DatabaseName);
        var sampleCollection = mongoDatabase.GetCollection<ExportSample>(_options.CollectionName);

        await sampleCollection.ReplaceOneAsync(
            x => x.Sha256SampleSet == $"{sample.Sha256}:{sample.SampleSet}",
            new ExportSample
            {
                Sha256SampleSet = $"{sample.Sha256}:{sample.SampleSet}",
                Imported = sample.Imported,
                Platform = sample.Platform,
                Sha256 = sample.Sha256,
                DoNotUseBefore = sample.DoNotUseBefore,
                SampleSet = sample.SampleSet,
                FileSize = sample.FileSize,
                FamilyName = sample.FamilyName
            },
            new ReplaceOptions { IsUpsert = true }, token);
    }

    public async Task StartAsync(CancellationToken token = default)
    {
        await PrepareIndexesAsync(token);
    }

    private async Task PrepareIndexesAsync(CancellationToken token = default)
    {
        var mongoDatabase = _mongoClient.GetDatabase(_options.DatabaseName);
        var mongoCollection = mongoDatabase.GetCollection<Sample>(_options.CollectionName);

        foreach (var index in _options.Indexes)
        {
            try
            {
                await mongoCollection.Indexes.CreateOneAsync(
                        new CreateIndexModel<Sample>(Builders<Sample>.IndexKeys.Ascending(index)), cancellationToken: token)
                    .ConfigureAwait(false);
            }
            catch (MongoCommandException)
            {
                await mongoCollection.Indexes.DropOneAsync($"{index}_1", token)
                    .ConfigureAwait(false);
                await mongoCollection.Indexes.CreateOneAsync(
                        new CreateIndexModel<Sample>(Builders<Sample>.IndexKeys.Ascending(index)), cancellationToken: token)
                    .ConfigureAwait(false);
            }
        }

        try
        {
            await mongoCollection.Indexes.CreateOneAsync(
                    new CreateIndexModel<Sample>(
                        Builders<Sample>
                            .IndexKeys.Ascending(_options.TimeSpanIndex),
                        new CreateIndexOptions { ExpireAfter = _options.Duration }), cancellationToken: token)
                .ConfigureAwait(false);
        }
        catch (MongoCommandException)
        {
            await mongoCollection.Indexes.DropOneAsync($"{_options.TimeSpanIndex}_1",
                token).ConfigureAwait(false);
            await mongoCollection.Indexes.CreateOneAsync(
                    new CreateIndexModel<Sample>(
                        Builders<Sample>.IndexKeys.Ascending(_options.TimeSpanIndex),
                        new CreateIndexOptions { ExpireAfter = _options.Duration }), cancellationToken: token)
                .ConfigureAwait(false);
        }
    }

    public Task StopAsync(CancellationToken cancellationToken = default)
    {
        return Task.CompletedTask;
    }
}
