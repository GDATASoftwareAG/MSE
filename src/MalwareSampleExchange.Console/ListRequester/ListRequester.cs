using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using JWT.Algorithms;
using JWT.Builder;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using MalwareSampleExchange.Console.Database;
using MalwareSampleExchange.Console.Models;
using MalwareSampleExchange.Console.SampleStorage;

namespace MalwareSampleExchange.Console.ListRequester;

public interface IListRequester
{
    IAsyncEnumerable<Token> RequestList(string username, DateTime start, DateTime? end, CancellationToken token = default);
}

public class ListRequester : IListRequester
{
    private readonly ILogger _logger;
    private readonly ListRequesterOptions _options;
    private readonly ISampleMetadataHandler _sampleMetadataHandler;
    private readonly IPartnerProvider _partnerProvider;
    private readonly ISampleStorageHandler _sampleStorageHandler;

    public ListRequester(ILogger<ListRequester> logger, IOptions<ListRequesterOptions> options,
        ISampleMetadataHandler sampleMetadataHandler, IPartnerProvider partnerProvider,
        ISampleStorageHandler sampleStorageHandler)
    {
        _logger = logger;
        _options = options.Value ?? throw new ArgumentNullException(nameof(options));
        _sampleMetadataHandler = sampleMetadataHandler;
        _partnerProvider = partnerProvider;
        _sampleStorageHandler = sampleStorageHandler;
    }

    public async IAsyncEnumerable<Token> RequestList(string username, DateTime start, DateTime? end,
        [EnumeratorCancellation] CancellationToken token = default)
    {
        var includeFamilyName = _partnerProvider.Partners.Single(_ => _.Name == username).IncludeFamilyName;
        var sampleSet = _partnerProvider.Partners.SingleOrDefault(_ => _.Name == username)?.Sampleset;

        var samples = await _sampleMetadataHandler.GetSamplesAsync(start, end, sampleSet, token);
        
        foreach (var sample in samples.Where(sample => sample.DoNotUseBefore <= DateTime.Now))
        {
            var fileSize = sample.FileSize == 0
                ? await _sampleStorageHandler.GetFileSizeAsync(sample.Sha256, token)
                : sample.FileSize;

            if (fileSize <= 0)
            {
                continue;
            }

            var builder = new JwtBuilder()
                .WithAlgorithm(new HMACSHA512Algorithm())
                .WithSecret(_options.Secret)
                .AddClaim("exp", DateTimeOffset.UtcNow.Add(_options.Expiration)
                    .ToUnixTimeSeconds())
                .AddClaim("sha256", sample.Sha256)
                .AddClaim("filesize", fileSize)
                .AddClaim("platform", sample.Platform)
                .AddClaim("partner", username);

            if (includeFamilyName)
            {
                builder.AddClaim("familyname", sample.FamilyName);
            }

            yield return new Token
            {
                _Token = builder.Encode()
            };
        };
    }
}

public static class EnumerableExtensions
{
    public static async IAsyncEnumerable<T> CountAndCallAsync<T>(this IAsyncEnumerable<T> enumerable, Action<int> callback)
    {
        var count = 0;

        await using var enumerator = enumerable.GetAsyncEnumerator();
        while (await enumerator.MoveNextAsync())
        {
            yield return enumerator.Current;
            count++;
        }

        callback(count);
    }
}
