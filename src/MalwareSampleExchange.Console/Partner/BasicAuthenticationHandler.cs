using System.Net.Http.Headers;
using System.Security.Claims;
using System.Text;
using System.Text.Encodings.Web;
using MalwareSampleExchange.Console.AuthHandler;
using MalwareSampleExchange.Console.Database;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Options;

namespace MalwareSampleExchange.Console.Partner;

public record User(string Username, bool AllowUpload);

public class BasicAuthenticationHandler : AuthenticationHandler<AuthenticationSchemeOptions>
{
    private readonly ILogger<BasicAuthenticationHandler> _logger;
    private readonly IPartnerProvider _partnerProvider;
    private readonly UploadOptions _uploadOptions;

    public BasicAuthenticationHandler(
        IOptionsMonitor<AuthenticationSchemeOptions> options,
        ILogger<BasicAuthenticationHandler> logger,
        ILoggerFactory loggerFactory,
        UrlEncoder encoder,
        ISystemClock clock,
        IPartnerProvider partnerProvider,
        IOptions<UploadOptions> uploadOptions)
        : base(options, loggerFactory, encoder, clock)
    {
        _logger = logger;
        _partnerProvider = partnerProvider;
        _uploadOptions = uploadOptions.Value;
    }

    protected override Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        // skip authentication if endpoint has [AllowAnonymous] attribute
        var endpoint = Context.GetEndpoint();
        if (endpoint?.Metadata.GetMetadata<IAllowAnonymous>() != null)
        {
            return Task.FromResult(AuthenticateResult.NoResult());
        }

        if (!Request.Headers.ContainsKey("Authorization"))
        {
            return Task.FromResult(AuthenticateResult.Fail("Missing Authorization Header"));
        }

        User? user = null;
        try
        {
            string username;
            string password;
            var authorizationHeaders = Request.Headers["Authorization"];
            if (authorizationHeaders.Count == 1 && authorizationHeaders[0].Contains(":"))
            {
                var basicAuth = authorizationHeaders[0].Split(":", 2);
                username = basicAuth[0];
                password = basicAuth[1];
                _logger.LogWarning(LogEvents.UsingIncorrectAuthFormat, $"Partner is using incorrect basic auth format {username}");
            }
            else
            {
                var authHeader = AuthenticationHeaderValue.Parse(authorizationHeaders);
                var credentialBytes = Convert.FromBase64String(authHeader.Parameter ?? String.Empty);
                var credentials = Encoding.UTF8.GetString(credentialBytes).Split(":", 2);
                username = credentials[0];
                password = credentials[1];
            }

            if (_partnerProvider.AreCredentialsOkay(username, password))
            {
                user = new User(username, username == _uploadOptions.AllowPartnerToUpload);
            }
        }
        catch
        {
            return Task.FromResult(AuthenticateResult.Fail("Invalid Authorization Header"));
        }

        if (user == null)
        {
            return Task.FromResult(AuthenticateResult.Fail("Invalid Username or Password"));
        }

        var claims = new[]
        {
            new Claim(ClaimTypes.Name, user.Username),
            new Claim(ClaimTypes.Role, user.AllowUpload ? "Upload" : "NoUpload")
        };
        var identity = new ClaimsIdentity(claims, Scheme.Name);
        var principal = new ClaimsPrincipal(identity);
        var ticket = new AuthenticationTicket(principal, Scheme.Name);

        return Task.FromResult(AuthenticateResult.Success(ticket));
    }
}
