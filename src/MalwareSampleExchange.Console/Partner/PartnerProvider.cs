using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using MalwareSampleExchange.Console.Database;
using MalwareSampleExchange.Console.ListRequester;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

namespace MalwareSampleExchange.Console.Partner;

public class PartnerProvider : IPartnerProvider, IDisposable
{
    private readonly ILogger<PartnerProvider> _logger;
    private readonly IHostApplicationLifetime _lifetime;
    private readonly HttpClient _httpClient;
    private readonly PartnerProviderOptions _options;
    private List<Partner> _partners = new();
    private readonly Timer _timer;

    public PartnerProvider(ILogger<PartnerProvider> logger, IOptions<PartnerProviderOptions> options, IHostApplicationLifetime lifetime,
        HttpClient httpClient)
    {
        _logger = logger;
        _lifetime = lifetime;
        _httpClient = httpClient;
        _options = options.Value;
        LoadPartners(null);
        _timer = new Timer(LoadPartners, null, TimeSpan.Zero, _options.RefreshInterval);
    }

    private void LoadPartners(object? _)
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(_options.Url))
            {
                var result = _httpClient.GetStringAsync(_options.Url).GetAwaiter().GetResult();
                _partners = System.Text.Json.JsonSerializer.Deserialize<Settings>(result)
                    ?.Partners ?? throw new InvalidDataException("Settings shouldn't be null");
                return;
            }

            var document = File.ReadAllText(_options.FilePath);
            var input = new StringReader(document);

            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(PascalCaseNamingConvention.Instance)
                .IgnoreUnmatchedProperties()
                .Build();

            _partners = deserializer.Deserialize<Settings>(input)
                .Partners ?? throw new ArgumentException("partners is not set");
        }
        catch (Exception e)
        {
            _logger.LogError(LogEvents.FailedToLoadPartners, e, "failed to LoadPartners");
            _lifetime.StopApplication();
        }
    }

    private class Settings
    {
        public List<Partner>? Partners { get; set; }
    }

    public bool AreCredentialsOkay(string username, string password)
    {
        var partner = _partners.SingleOrDefault(_ => _?.Name == username, null);
        if (partner == null)
        {
            _logger.LogWarning(LogEvents.UnknownPartner, $"Unknown user name: {username}");
            return false;
        }

        if (partner.Enabled == false)
        {
            _logger.LogWarning(LogEvents.DisabledPartner, $"Disabled partner {username} tried to log in.");
            return false;
        }
        
        var hash = Sha256.Hash(password, Sha256.StringToByteArray(partner.Salt));
        return partner.Password.Equals(Sha256.ByteArrayToString(hash));
    }

    public IEnumerable<Partner> Partners => _partners;

    public void Dispose()
    {
        _timer.Dispose();
    }
}
