using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Moq;
using MalwareSampleExchange.Console.Database;
using MalwareSampleExchange.Console.Models;
using MalwareSampleExchange.Console.SampleStorage;
using MongoDB.Driver;
using TestContainers.Container.Abstractions;
using TestContainers.Container.Abstractions.Hosting;
using Xunit;

namespace MalwareSampleExchange.Console_Test;

[SuppressMessage("ReSharper", "ClassNeverInstantiated.Global")]
public class MongoDockerFixture : IAsyncLifetime
{
    private static readonly IConfiguration Configuration = new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile("appsettings.json")
        .AddEnvironmentVariables()
        .Build();


    private GenericContainer MongoContainer { get; }
    private readonly ISampleStorageHandler _storageHandler;
    private MongoMetadataHandler? _metadataHandler;
    public string IpAddress => MongoContainer.GetDockerHostIpAddress();
    public int Port => MongoContainer.GetMappedPort(27017);

    public MongoDockerFixture()
    {
        MongoContainer = new ContainerBuilder<GenericContainer>()
            .ConfigureDockerImageName("mongo:xenial")
            .ConfigureContainer((_, c) =>
            {
                c.ExposedPorts.Add(27017);
            })
            .Build();

        _storageHandler = new FileSampleStorageHandler(Mock.Of<ILogger<FileSampleStorageHandler>>(),
            new OptionsWrapper<FileStorageOptions>(new FileStorageOptions
            {
                Path = Configuration["Storage:Path"]
            }));

    }

    private async Task WriteFileWrapperAsync(string sha256, string s)
    {
        var stream = new MemoryStream();
        var writer = new StreamWriter(stream);
        await writer.WriteAsync(s);
        await writer.FlushAsync();
        stream.Position = 0;
        await _storageHandler.WriteAsync(sha256, stream);
    }

    private async Task CreateTestFilesAsync()
    {
        await WriteFileWrapperAsync("131f95c51cc819465fa1797f6ccacf9d494aaaff46fa3eac73ae63ffbdfd8267",
            "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\n");
        await WriteFileWrapperAsync("cda0a81901ced9306d023500ff1c383d6b4bd8cebefa886faa2a627a796e87f",
            "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\nDIE ZWEITE\n");
    }

    private async Task CreateTestExportSamplesAsync()
    {
        if (_metadataHandler == null)
        {
            return;
        }

        await _metadataHandler.InsertSampleAsync(
            new RequestExportSample
            {
                Sha256 = "131f95c51cc819465fa1797f6ccacf9d494aaaff46fa3eac73ae63ffbdfd8267",
                DoNotUseBefore = DateTime.Now.AddHours(-12),
                Imported = DateTime.Now.AddDays(-1),
                Platform = "DOS",
                SampleSet = "Classic",
                FamilyName = "foobar"
            });
        await _metadataHandler.InsertSampleAsync(
            new RequestExportSample
            {
                Sha256 = "cda0a81901ced9306d023500ff1c383d6b4bd8cebefa886faa2a627a796e87f",
                DoNotUseBefore = DateTime.Now.AddDays(4),
                Imported = DateTime.Now.AddDays(-1),
                Platform = "DOS",
                SampleSet = "Classic",
                FamilyName = "barfoo"
            });
        await _metadataHandler.InsertSampleAsync(
            new RequestExportSample
            {
                Sha256 = "52f1a61ae232c5dcba376c60d6ba2b22a34e3c39d2fd2563f2cc9cc7b2a77a2b",
                DoNotUseBefore = DateTime.Now.AddHours(-12),
                Imported = DateTime.Now.AddDays(-1),
                Platform = "DOS",
                SampleSet = "Example",
                FamilyName = "thc"
            });
    }

    public async Task InitializeAsync()
    {
        await MongoContainer.StartAsync();
        var connected = false;
        var options = new MongoMetadataOptions();
        Configuration.GetSection("MongoDb").Bind(options);
        options.ConnectionString = $"mongodb://{IpAddress}:{Port}";
        _metadataHandler = new MongoMetadataHandler(new OptionsWrapper<MongoMetadataOptions>(options));

        while (!connected)
        {
            try
            {
                var mongoClient = new MongoClient(options.ConnectionString);
                mongoClient.GetDatabase(options.DatabaseName);
                connected = true;
            }
            catch (Exception)
            {
                //
            }
        }
        await _metadataHandler.StartAsync();
        await CreateTestFilesAsync();
        await CreateTestExportSamplesAsync();
    }

    public Task DisposeAsync()
    {
        MongoContainer.StopAsync();
        Directory.Delete(Configuration["Storage:Path"], true);
        return Task.CompletedTask;
    }
}
