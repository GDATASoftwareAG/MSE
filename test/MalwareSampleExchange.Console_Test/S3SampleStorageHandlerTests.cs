using System;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Amazon.S3;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Containers;
using MalwareSampleExchange.Console.SampleStorage;
using Microsoft.Extensions.Options;
using Xunit;

namespace MalwareSampleExchange.Console_Test;

[Collection("S3SampleStorageHandlerTests")]
public class S3SampleStorageHandlerTests : IAsyncLifetime
{
    private readonly IContainer _minIoContainer;
    private readonly IOptions<S3StorageOptions> _defaultConfig;

    public S3SampleStorageHandlerTests()
    {
        var config = new S3StorageOptions
        {
            AccessKey = "AKIAIOSFODNN7EXAMPLE",
            SecretKey = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
            Bucket = "results",
            S3Config = new AmazonS3Config
            {
                UseHttp = true,
                ForcePathStyle = true,
            }
        };

        _minIoContainer = new ContainerBuilder()
            .WithImage("minio/minio:RELEASE.2020-06-01T17-28-03Z")
            //.ConfigureDockerImageName("quay.io/minio/minio:RELEASE.2022-02-01T18-00-14Z")
            .WithEnvironment("MINIO_ROOT_USER", config.AccessKey)
            .WithEnvironment("MINIO_ROOT_PASSWORD", config.SecretKey)
            .WithEnvironment("MINIO_ACCESS_KEY", config.AccessKey)
            .WithEnvironment("MINIO_SECRET_KEY", config.SecretKey)
            .WithEnvironment("MINIO_PROMETHEUS_AUTH_TYPE", "public")
            .WithPortBinding(9000, true)
            .WithCommand("server", "/export")
            .Build();
        _defaultConfig = new OptionsWrapper<S3StorageOptions>(config);
    }

    [Fact]
    public async void Handler_RoundTrip()
    {
        var sha256 = "131f95c51cc819465fa1797f6ccacf9d494aaaff46fa3eac73ae63ffbdfd8267";
        var content = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\n";
        var handler = new S3SampleStorageHandler(_defaultConfig);

        await WriteFileWrapperAsync(handler, sha256, content);

        var size = await handler.GetFileSizeAsync(sha256);
        Assert.Equal(content.Length, size);

        var fileStreamResult = await handler.GetAsync(sha256);

        var reader = new StreamReader(fileStreamResult.FileStream);
        var text = await reader.ReadToEndAsync();
        Assert.Equal(content, text);
    }

    private async Task WriteFileWrapperAsync(ISampleStorageHandler handler, string sha256, string s)
    {
        var stream = new MemoryStream();
        var writer = new StreamWriter(stream);
        await writer.WriteAsync(s);
        await writer.FlushAsync();
        stream.Position = 0;
        await handler.WriteAsync(sha256, stream);
    }

    public async Task InitializeAsync()
    {
        await _minIoContainer.StartAsync();

        _defaultConfig.Value.S3Config.ServiceURL =
            $"http://{_minIoContainer.Hostname}:{_minIoContainer.GetMappedPublicPort(9000)}";


        var httpClient = new HttpClient();

        var isReady = false;
        for (var tries = 0; tries < 30; tries++) // Give Minio 30 seconds to start, testing every second
        {
            if (await IsMinioReady(httpClient))
            {
                isReady = true;
                break;
            }

            Thread.Sleep(1000);
        }

        if (!isReady)
        {
            throw new TimeoutException("Minio did not initialize in time, giving up.");
        }

        var client = new AmazonS3Client(
            _defaultConfig.Value.AccessKey,
            _defaultConfig.Value.SecretKey,
            new AmazonS3Config
            {
                UseHttp = true,
                ForcePathStyle = true,
                ServiceURL = _defaultConfig.Value.S3Config.ServiceURL,
            });
        await client.PutBucketAsync(_defaultConfig.Value.Bucket);
    }

    private async Task<bool> IsMinioReady(HttpClient httpClient)
    {
        try
        {
            var uri = new Uri(new Uri(_defaultConfig.Value.S3Config.ServiceURL),
                "/minio/health/ready");
            return (await httpClient.GetAsync(uri)).IsSuccessStatusCode;
        }
        catch (Exception)
        {
            return false;
        }
    }

    public Task DisposeAsync() => _minIoContainer.StopAsync();
}
